// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  position String?
  role     String? @default("user")

  tasks        Task[]
  procurements Procurement[]

  @@map("user")
}

model Customer {
  id String @id @default(cuid())

  name  String?
  code  String
  email String
  phone String

  procurements Procurement[]

  @@map("customer")
}

model Procurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  expectedValue String @map("expected_value")
  resultValue   String @map("result_value")

  announcedAt DateTime @map("announced_at")
  finishedAt  DateTime @map("finished_at")

  product String
  unit    String
  scope   String

  status String @default("in process")

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  jointProcurement   JointProcurement? @relation(fields: [jointProcurementid], references: [id])
  jointProcurementid String?           @map("joint_procurement_id")

  contracts Contract[]

  @@map("procurement")
}

model JointProcurement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  expectedValue String @map("expected_value")
  resultValue   String @map("result_value")

  announcedAt DateTime @map("announced_at")
  finishedAt  DateTime @map("finished_at")

  product String
  unit    String
  scope   String

  status String @default("in process")

  procurements Procurement[]

  @@map("joint_procurement")
}

model Contract {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  startValue      String   @map("start_value")
  currentValue    String?  @map("final_value")
  signatureDate   DateTime @map("signature_date")
  terminationDate DateTime @map("termination_date")

  product String
  unit    String
  scope   String

  procurement   Procurement @relation(fields: [procurementId], references: [id])
  procurementId String      @map("procurement_id")

  agreements contractAgreement[]

  @@map("contract")
}

model contractAgreement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  signatureDate DateTime @map("signature_date")
  reason        String
  changes       String

  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String   @map("contract_id")

  @@map("contract_agreement")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name            String
  priority        Priority?
  status          String?   @default("Waiting for status")
  terminationDate DateTime? @default(now()) @map("termination_date")
  isCompleted     Boolean?  @default(false) @map("is_completed")
  notes           String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

enum Priority {
  low
  medium
  high
}
